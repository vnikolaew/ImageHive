{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nexport const globalForPrisma = globalThis as unknown as {\r\n   prisma: PrismaClient | undefined\r\n};\r\n\r\nexport let prisma = globalForPrisma.prisma ?? new PrismaClient({\r\n   log: [{ emit: `stdout`, level: `info` }],\r\n   errorFormat: `pretty`,\r\n   transactionOptions: { isolationLevel: `Serializable` },\r\n});\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;"],"names":[],"mappings":";;;;;;;AAEO,MAAM,kBAAkB;AAIxB,IAAI,SAAS,gBAAgB,MAAM,IAAI,IAAI,uDAAA,CAAA,eAAY,CAAC;IAC5D,KAAK;QAAC;YAAE,MAAM,CAAC,MAAM,CAAC;YAAE,OAAO,CAAC,IAAI,CAAC;QAAC;KAAE;IACxC,aAAa,CAAC,MAAM,CAAC;IACrB,oBAAoB;QAAE,gBAAgB,CAAC,YAAY,CAAC;IAAC;AACxD;AAEA,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/session.ts"],"sourcesContent":["import { CallbacksOptions } from \"@auth/core/types\";\r\n\r\ntype SessionParameter = Parameters<CallbacksOptions[\"session\"]>[0]\r\n\r\nexport const session = async ({ session, token, user, ...rest }: SessionParameter) => {\r\n      if (session && session.user) {\r\n         //@ts-ignore\r\n         (session.user as any).id = token.id;\r\n      }\r\n      return session;\r\n   }\r\n;"],"names":[],"mappings":";;;AAIO,MAAM,UAAU,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAwB;IAC3E,IAAI,WAAW,QAAQ,IAAI,EAAE;QAC1B,YAAY;QACX,QAAQ,IAAI,CAAS,EAAE,GAAG,MAAM,EAAE;IACtC;IACA,OAAO;AACV"}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport Google from \"@auth/core/providers/google\";\r\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\r\nimport { prisma, globalForPrisma } from \"@/lib/prisma\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { session } from \"@/lib/session\";\r\nimport ResendProvider from \"next-auth/providers/resend\";\r\nimport { Resend } from \"resend\";\r\n\r\nglobalForPrisma.prisma ??= new PrismaClient();\r\n\r\nexport const { handlers, signIn, signOut, auth } = NextAuth({\r\n   adapter: PrismaAdapter(prisma),\r\n   debug: false,\r\n   callbacks: {\r\n      session,\r\n      async authorized({ request, auth }) {\r\n         return true;\r\n      },\r\n      async signIn({ user, profile, account, email }) {\r\n         return true;\r\n\r\n      },\r\n      async jwt({ token, user, session, profile, account }) {\r\n         if (user?.id) token.id = user.id;\r\n\r\n         return token;\r\n      },\r\n   },\r\n   session: { strategy: `jwt` },\r\n   secret: process.env.AUTH_SECRET ?? `sdfsdfdsfwerwe`,\r\n   providers: [Google, ResendProvider({\r\n      from: `onboarding@resend.dev`,\r\n      generateVerificationToken() {\r\n         return crypto.randomUUID();\r\n      },\r\n      async sendVerificationRequest({ request, url, identifier, provider, token }) {\r\n         try {\r\n            console.log({ url, identifier, provider, token, request });\r\n\r\n            const resend = new Resend(process.env.AUTH_RESEND_KEY!);\r\n            await resend.emails.send({\r\n               from: provider.from,\r\n               to: identifier,\r\n               subject: \"Login Link to your Account\",\r\n               html: \"<p>Click the magic link below to sign in to your account:</p>\\\r\n             <p><a href=\\\"\" + url + \"\\\"><b>Sign in</b></a></p>\",\r\n            });\r\n         } catch (error) {\r\n            console.log({ error });\r\n         }\r\n      },\r\n   })],\r\n});"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AASA,+GAAA,CAAA,kBAAe,CAAC,MAAM,KAAK,IAAI,uDAAA,CAAA,eAAY;AAEpC,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,uJAAA,CAAA,UAAQ,AAAD,EAAE;IACzD,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,+GAAA,CAAA,SAAM;IAC7B,OAAO;IACP,WAAW;QACR,SAAA,gHAAA,CAAA,UAAO;QACP,MAAM,YAAW,EAAE,OAAO,EAAE,IAAI,EAAE;YAC/B,OAAO;QACV;QACA,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;YAC3C,OAAO;QAEV;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE;YACjD,IAAI,MAAM,IAAI,MAAM,EAAE,GAAG,KAAK,EAAE;YAEhC,OAAO;QACV;IACH;IACA,SAAS;QAAE,UAAU,CAAC,GAAG,CAAC;IAAC;IAC3B,QAAQ,QAAQ,GAAG,CAAC,WAAW,IAAI,CAAC,cAAc,CAAC;IACnD,WAAW;QAAC,uJAAA,CAAA,UAAM;QAAE,CAAA,GAAA,uJAAA,CAAA,UAAc,AAAD,EAAE;YAChC,MAAM,CAAC,qBAAqB,CAAC;YAC7B;gBACG,OAAO,OAAO,UAAU;YAC3B;YACA,MAAM,yBAAwB,EAAE,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE;gBACxE,IAAI;oBACD,QAAQ,GAAG,CAAC;wBAAE;wBAAK;wBAAY;wBAAU;wBAAO;oBAAQ;oBAExD,MAAM,SAAS,IAAI,0IAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,eAAe;oBACrD,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;wBACtB,MAAM,SAAS,IAAI;wBACnB,IAAI;wBACJ,SAAS;wBACT,MAAM;8BACS,MAAM;oBACxB;gBACH,EAAE,OAAO,OAAO;oBACb,QAAQ,GAAG,CAAC;wBAAE;oBAAM;gBACvB;YACH;QACH;KAAG;AACN"}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/auth/[...nextauth]/route.ts"],"sourcesContent":["import { handlers } from \"@/auth\" // Referring to the auth.ts we just created\r\nexport const { GET, POST } = handlers"],"names":[],"mappings":";;;;;;;AACO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,sGAAA,CAAA,WAAQ"}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}