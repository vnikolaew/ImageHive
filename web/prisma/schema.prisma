generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views", "fullTextSearch", "driverAdapters", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, pgvector(map: "vector", schema: "public")]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  images        Image[]
  followedBy    Follows[] @relation("follower")
  following     Follows[] @relation("following")

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  imageLikes       ImageLike[]
  imageComments    ImageComment[]
  imageCollections ImageCollection[]
  imageDownloads   ImageDownload[]

  profileId String?
  profile   Profile?
}

model Profile {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  gender         Gender    @default(UNSPECIFIED)
  firstName      String?
  lastName       String?
  city           String?
  country        String?
  dateOfBirth    DateTime?
  about          String?
  onlineProfiles Json?     @default("null") @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  UNSPECIFIED
}

model Follows {
  follower   User   @relation("follower", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  metadata Json? @default("null") @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([followingId, followerId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  metadata          Json?   @default("null") @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Image {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String?  @db.VarChar(200)
  original_file_name String
  absolute_url       String
  file_format        String
  dimensions_set     String[]
  tags               String[]
  metadata           Json     @db.JsonB

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  is_deleted Boolean  @default(false)

  owner       User              @relation(fields: [userId], references: [id])
  userId      String
  likes       ImageLike[]
  comments    ImageComment[]
  collections CollectionImage[]
  downloads   ImageDownload[]
}

model Tag {
  name      String                     @unique
  embedding Unsupported("vector(384)")
}

model ImageLike {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  image    Image  @relation(fields: [imageId], references: [id])
  imageId  String @db.Uuid
  metadata Json   @db.JsonB

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ImageComment {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  image    Image  @relation(fields: [imageId], references: [id])
  imageId  String @db.Uuid
  metadata Json   @db.JsonB

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  raw_text String @db.VarChar(500)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  is_deleted Boolean  @default(false)
}

model ImageCollection {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  metadata Json @db.JsonB

  user   User    @relation(fields: [userId], references: [id])
  userId String
  title  String  @db.VarChar(100)
  public Boolean @default(false)

  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  is_deleted Boolean           @default(false)
  images     CollectionImage[]
}

model CollectionImage {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metadata Json   @db.JsonB

  collection   ImageCollection @relation(fields: [collectionId], references: [id])
  collectionId String          @db.Uuid

  image   Image  @relation(fields: [imageId], references: [id])
  imageId String @db.Uuid

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  is_deleted Boolean  @default(false)
}

model ImageDownload {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  image    Image  @relation(fields: [imageId], references: [id])
  imageId  String @db.Uuid
  metadata Json   @db.JsonB

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}
