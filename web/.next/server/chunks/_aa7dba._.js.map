{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nexport const globalForPrisma = globalThis as unknown as {\r\n   prisma: PrismaClient | undefined\r\n};\r\n\r\nexport let prisma = globalForPrisma.prisma ?? new PrismaClient({\r\n   log: [{ emit: `stdout`, level: `info` }],\r\n   errorFormat: `pretty`,\r\n   transactionOptions: { isolationLevel: `Serializable` },\r\n});\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;"],"names":[],"mappings":";;;;;;;AAEO,MAAM,kBAAkB;AAIxB,IAAI,SAAS,gBAAgB,MAAM,IAAI,IAAI,uDAAA,CAAA,eAAY,CAAC;IAC5D,KAAK;QAAC;YAAE,MAAM,CAAC,MAAM,CAAC;YAAE,OAAO,CAAC,IAAI,CAAC;QAAC;KAAE;IACxC,aAAa,CAAC,MAAM,CAAC;IACrB,oBAAoB;QAAE,gBAAgB,CAAC,YAAY,CAAC;IAAC;AACxD;AAEA,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\nimport { NextResponse } from \"next/server\";\r\nimport { constants } from \"node:http2\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n   return twMerge(clsx(inputs));\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n   success: boolean,\r\n   message: string;\r\n   data: T,\r\n}\r\n\r\nexport class ImageHiveApiResponse<Body = unknown> extends NextResponse<Body> {\r\n\r\n   static badRequest<JsonBody>(body: JsonBody, init?: ResponseInit): ImageHiveApiResponse<JsonBody> {\r\n      return ImageHiveApiResponse.json(body, { status: 404, ...init });\r\n   }\r\n\r\n   static success<JsonBody>(body: JsonBody, init?: ResponseInit): ImageHiveApiResponse<ApiResponse<JsonBody>> {\r\n      return ImageHiveApiResponse.json({\r\n         success: true,\r\n         message: `Success.`,\r\n         data: body,\r\n      }, { status: 200, ...init });\r\n   }\r\n\r\n   static failure<JsonBody>(message: string, init?: ResponseInit): ImageHiveApiResponse<ApiResponse<JsonBody>> {\r\n      return ImageHiveApiResponse.json({\r\n         success: false,\r\n         message,\r\n         data: null!,\r\n      }, { status: 404, ...init });\r\n   }\r\n}"],"names":[],"mappings":";;;;;;;;;;;AAKO,SAAS,GAAG,GAAG,MAAoB;IACvC,OAAO,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,uIAAA,CAAA,OAAI,AAAD,EAAE;AACvB;AAQO,MAAM,6BAA6C,gIAAA,CAAA,eAAY;IAEnE,OAAO,WAAqB,IAAc,EAAE,IAAmB,EAAkC;QAC9F,OAAO,qBAAqB,IAAI,CAAC,MAAM;YAAE,QAAQ;YAAK,GAAG,IAAI;QAAC;IACjE;IAEA,OAAO,QAAkB,IAAc,EAAE,IAAmB,EAA+C;QACxG,OAAO,qBAAqB,IAAI,CAAC;YAC9B,SAAS;YACT,SAAS,CAAC,QAAQ,CAAC;YACnB,MAAM;QACT,GAAG;YAAE,QAAQ;YAAK,GAAG,IAAI;QAAC;IAC7B;IAEA,OAAO,QAAkB,OAAe,EAAE,IAAmB,EAA+C;QACzG,OAAO,qBAAqB,IAAI,CAAC;YAC9B,SAAS;YACT;YACA,MAAM;QACT,GAAG;YAAE,QAAQ;YAAK,GAAG,IAAI;QAAC;IAC7B;AACH"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/forgot/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { z } from \"zod\";\r\nimport { constants } from \"node:http2\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport { ImageHiveApiResponse } from \"@/lib/utils\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { Resend } from \"resend\";\r\nimport { User } from \"@prisma/client\";\r\n\r\nconst requestSchema = z.object({\r\n   email: z.string().email({ message: `Please enter valid e-mail address.` }),\r\n});\r\n\r\nasync function sendResetEmailAsync(user: User, user_token: string): Promise<void> {\r\n   const url = `${process.env.BASE_URL}/reset/${user.id}?token=${encodeURIComponent(user_token)}`;\r\n   const resend = new Resend(process.env.AUTH_RESEND_KEY!);\r\n\r\n   await resend.emails.send({\r\n      from: `onboarding@resend.dev`,\r\n      to: user.email,\r\n      subject: \"Password Reset Link for your Account\",\r\n      html: \"<p>Click the link below to reset your account password:</p>\\\r\n             <p><a href=\\\"\" + url + \"\\\"><b>Reset</b></a></p>\",\r\n   });\r\n}\r\n\r\nexport async function POST(req: NextRequest, res: NextResponse) {\r\n   const body = await req.json();\r\n   const parsedBody = requestSchema.safeParse(body);\r\n   if (!parsedBody.success) {\r\n      return NextResponse.json({\r\n         success: false,\r\n         message: `Invalid body.`,\r\n      }, { status: constants.HTTP_STATUS_BAD_REQUEST });\r\n   }\r\n\r\n   const { email } = parsedBody.data;\r\n   const user = await prisma.user.findFirst({\r\n      where: { email },\r\n      include: { images: true },\r\n   });\r\n\r\n   if (!user) {\r\n      return ImageHiveApiResponse.badRequest({\r\n         success: false,\r\n         message: `User not found.`,\r\n      });\r\n   }\r\n\r\n   try {\r\n      // Generate a reset token and send an e-mail:\r\n      const user_token = jwt.sign({ data: user.id }, process.env.RESET_TOKEN_SECRET!, {\r\n         expiresIn: 60 * 60 * 10,\r\n      });\r\n\r\n      let account = await prisma.account.findFirst({\r\n         where: { userId: user.id },\r\n      });\r\n      if (account) {\r\n         console.log({ account });\r\n         account = await prisma.account.update({\r\n            where: {\r\n               provider_providerAccountId: {\r\n                  providerAccountId: account.providerAccountId,\r\n                  provider: account.provider,\r\n               },\r\n            },\r\n            data: {\r\n               metadata: { reset_token: user_token },\r\n            },\r\n         });\r\n         console.log({ account });\r\n      }\r\n\r\n      return ImageHiveApiResponse.success({\r\n         user,\r\n         account\r\n      });\r\n   } catch (err: any) {\r\n      return ImageHiveApiResponse.badRequest({\r\n         success: false,\r\n         message: err.message,\r\n      });\r\n\r\n   }\r\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AASA,MAAM,gBAAgB,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5B,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;QAAE,SAAS,CAAC,kCAAkC,CAAC;IAAC;AAC3E;AAEA,eAAe,oBAAoB,IAAU,EAAE,UAAkB;IAC9D,MAAM,MAAM,CAAC,EAAE,QAAQ,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,OAAO,EAAE,mBAAmB,YAAY,CAAC;IAC9F,MAAM,SAAS,IAAI,0IAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,eAAe;IAErD,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;QACtB,MAAM,CAAC,qBAAqB,CAAC;QAC7B,IAAI,KAAK,KAAK;QACd,SAAS;QACT,MAAM;8BACkB,MAAM;IACjC;AACH;AAEO,eAAe,KAAK,GAAgB,EAAE,GAAiB;IAC3D,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,MAAM,aAAa,cAAc,SAAS,CAAC;IAC3C,IAAI,CAAC,WAAW,OAAO,EAAE;QACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACtB,SAAS;YACT,SAAS,CAAC,aAAa,CAAC;QAC3B,GAAG;YAAE,QAAQ,gDAAA,CAAA,YAAS,CAAC,uBAAuB;QAAC;IAClD;IAEA,MAAM,EAAE,KAAK,EAAE,GAAG,WAAW,IAAI;IACjC,MAAM,OAAO,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACtC,OAAO;YAAE;QAAM;QACf,SAAS;YAAE,QAAQ;QAAK;IAC3B;IAEA,IAAI,CAAC,MAAM;QACR,OAAO,8GAAA,CAAA,uBAAoB,CAAC,UAAU,CAAC;YACpC,SAAS;YACT,SAAS,CAAC,eAAe,CAAC;QAC7B;IACH;IAEA,IAAI;QACD,6CAA6C;QAC7C,MAAM,aAAa,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE,MAAM,KAAK,EAAE;QAAC,GAAG,QAAQ,GAAG,CAAC,kBAAkB,EAAG;YAC7E,WAAW,KAAK,KAAK;QACxB;QAEA,IAAI,UAAU,MAAM,+GAAA,CAAA,SAAM,CAAC,OAAO,CAAC,SAAS,CAAC;YAC1C,OAAO;gBAAE,QAAQ,KAAK,EAAE;YAAC;QAC5B;QACA,IAAI,SAAS;YACV,QAAQ,GAAG,CAAC;gBAAE;YAAQ;YACtB,UAAU,MAAM,+GAAA,CAAA,SAAM,CAAC,OAAO,CAAC,MAAM,CAAC;gBACnC,OAAO;oBACJ,4BAA4B;wBACzB,mBAAmB,QAAQ,iBAAiB;wBAC5C,UAAU,QAAQ,QAAQ;oBAC7B;gBACH;gBACA,MAAM;oBACH,UAAU;wBAAE,aAAa;oBAAW;gBACvC;YACH;YACA,QAAQ,GAAG,CAAC;gBAAE;YAAQ;QACzB;QAEA,OAAO,8GAAA,CAAA,uBAAoB,CAAC,OAAO,CAAC;YACjC;YACA;QACH;IACH,EAAE,OAAO,KAAU;QAChB,OAAO,8GAAA,CAAA,uBAAoB,CAAC,UAAU,CAAC;YACpC,SAAS;YACT,SAAS,IAAI,OAAO;QACvB;IAEH;AACH"}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}